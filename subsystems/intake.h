#pragma config(Motor,  port1,           driveLB,       tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           driveLF,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           ALB,           tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           ALT,           tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           IR,            tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           IL,            tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           ART,           tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           ARB,           tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port9,           driveRF,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          driveRB,       tmotorVex393_HBridge, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)

#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

void setDrive(int left, int right) {
	motor[driveLB] = motor[driveLF] = left;
	motor[driveRB] = motor[driveRF] = right;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                          Pre-Autonomous Functions
//
// You may want to perform some actions before the competition starts. Do them in the
// following function.
//
/////////////////////////////////////////////////////////////////////////////////////////

void pre_auton()
{
  // Set bStopTasksBetweenModes to false if you want to keep user created tasks running between
  // Autonomous and Tele-Op modes. You will need to manage all user created tasks if set to false.
  bStopTasksBetweenModes = true;

	// All activities that occur before the competition starts
	// Example: clearing encoders, setting servo positions, ...
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 Autonomous Task
//
// This task is used to control your robot during the autonomous phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task autonomous()
{
  // .....................................................................................
  // Insert user code here.
  // .....................................................................................

	AutonomousCodePlaceholderForTesting();  // Remove this function call once you have "real" code.
}

/////////////////////////////////////////////////////////////////////////////////////////
//
//                                 User Control Task
//
// This task is used to control your robot during the user control phase of a VEX Competition.
// You must modify the code to add your own robot specific commands here.
//
/////////////////////////////////////////////////////////////////////////////////////////

task usercontrol()
{
	// User control code here, inside the loop

	while (true)
	{
		if (vexRT[Btn6D]== 1 )
		{
			motor[ALT] = -127;
			motor[ALB] = 127;
			motor[ART] = 127;
			motor[ARB] = -127;
		}
		else if (vexRT[Btn6U] == 1 )
		{
			motor[ALT] = 127;
			motor[ALB] = -127;
			motor[ART] = -127;
			motor[ARB] = 127;
		}
		else
		{
			motor[ALT] = 15;
			motor[ALB] = -15;
			motor[ART] = -15;
			motor[ARB] = 15;
		}
		if (vexRT[Btn5D]== 1 )
		{
			motor[IR] = -127;
			motor[IL] = 127;
		}
		else if (vexRT[Btn5U] == 1 )
		{
			motor[IR] = 127;
			motor[IL] = -127;
		}
		else {
			motor[IR] = 0;
			motor[IL] = 0;
		}	
		setDrive(vexRT[Ch3], vexRT[ch2]);
	}
}
